"""
Django settings for coplate_project project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '2!vznt=87d&5*k(b*jh52bvd53hn&)wfubl=#!vrc4cw*zni*r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'coplate',  # django가 template를 찾을 때 순서대로 찾기 때문에 template 오버라이딩을 하려면 coplate 앱이 allauth 앱보다 위에 있어야 한다.
    'widget_tweaks',  # form 위젯(input 태그)를 수정하기 위한 패키지
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
]

SITE_ID = 1

# 전체적인 request에 대한 로직은 middleware에서 구현(request는 위에서 아래로 통과, response는 아래에서 위로 통과)
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # request에 user 속성 추가
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "coplate.middleware.ProfileSetupMiddleware",
]

ROOT_URLCONF = 'coplate_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'coplate_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': "coplate.validators.CustomPasswordValidator",
    },

]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'ko'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # media 파일의 위치를 django에게 알려준다.
MEDIA_URL = "/uploads/"  # media url

# Auth Settings

AUTH_USER_MODEL = 'coplate.User'  # 이 프로젝트에서 User 모델을 사용하겠다고 선언. migration 했을 때 이 User 모델을 참조해서 테이블을 만들고 all auth가 이 User 모델을 사용한다.

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_SIGNUP_REDIRECT_URL = "profile-set"  # url name 이용
LOGIN_REDIRECT_URL = "index"  # login하면 어떤 페이지로 redirect 할 것인지 정의
LOGIN_URL = "account_login"  # 웹 서비스의 로그인에 대한 url을 설정. account_login : all auth가 제공하는 url
ACCOUNT_LOGOUT_ON_GET = True  # True : logout하면 바로 메인화면으로 전환. False : logout 확인 화면으로 전환
ACCOUNT_AUTHENTICATION_METHOD = "email"  # authentication 방법을 정하는 setting. 디폴트는 username. 둘 다 사용하려면 username_email
ACCOUNT_EMAIL_REQUIRED = True  # 회원가입 페이지에서 email 필드 필수
ACCOUNT_USERNAME_REQUIRED = False  # 회원가입 페이지에서 username 필드 삭제
# ACCOUNT_SIGNUP_FORM_CLASS = "coplate.forms.SignupForm"  # 폼 사용
ACCOUNT_SESSION_REMEMBER = True  # True : session 정보 기억. False : session 정보 기억 안함
# SESSION_COOKIE_AGE = 3600  # session 쿠키 만료시간(단위는 초). 영원히 만료되지 않게 하는 방법은 없음
ACCOUNT_PASSWORD_INPUT_RENDER_VALUE = True  # form에 대한 오류가 나도 입력했던 비밀번호를 지우지않고 놔둠
ACCOUNT_EMAIL_VARIFICATION = "optional"  # mandatory : 이메일 인증할 때까지 로그인할 수 없음. optional : 이메일 인증 메일은 발송하나 인증하지 않아도 로그인 가능. none : 이메일 인증하지 않음.
ACCOUNT_CONFIRM_EMAIL_ON_GET = True  # 이메일 인증 링크 클릭하면 회원가입 완료
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = "account_email_confirmation_done"  # 로그인 상태 이메일 인증 완료 시 url 이동
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = "account_email_confirmation_done"  # 로그아웃 상태 이메일 인증 완료 시 url 이동
# PASSWORD_RESET_TIMEOUT_DAYS = 3  # 비밀번호 재설정 링크 유효기간
ACCOUNT_EMAIL_SUBJECT_PREFIX = ""  # allauth가 발송하는 이메일 제목의 웹사이트 도메인 정보


# Email settings

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
